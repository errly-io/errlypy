name: Release


on:
  workflow_dispatch:
    inputs:
      tag:
        description: "The version to tag, without the leading 'v'. If omitted, will initiate a dry run (no uploads)."
        type: string
      sha:
        description: "The full sha of the commit to be released. If omitted, the latest commit on the default branch will be used."
        default: ""
        type: string

env:
  PACKAGE_NAME: errlypy
  PYTHON_VERSION: "3.11"

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Configure uv to use project venv
        run: ~/.local/bin/uv venv .venv

      - name: Install build dependencies (including hatchling)
        run: ~/.local/bin/uv pip install hatchling uv

      - name: "Build distribution (sdist + wheel)"
        run: ~/.local/bin/uv run hatch build

      - name: "Test installation from wheel"
        run: |
          ~/.local/bin/uv pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
      - name: "Upload distribution files"
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  validate-tag:
    runs-on: ubuntu-latest
    if: ${{ inputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
      - name: Check master branch
        if: ${{ inputs.sha }}
        run: |
          git fetch origin master --unshallow
          if ! git branch --contains ${{ inputs.sha }} | grep -E '(^|\s)master$'; then
            echo "The specified sha is not on the master branch" >&2
            exit 1
          fi
      - name: Check tag consistency
        run: |
          git checkout ${{ inputs.sha }}
          version=$(grep "version = " pyproject.toml | sed -e 's/version = "\(.*\)"/\1/g')
          if [ "${{ inputs.tag }}" != "${version}" ]; then
            echo "The input tag does not match the version from pyproject.toml:" >&2
            echo "${{ inputs.tag }}" >&2
            echo "${version}" >&2
            exit 1
          else
            echo "Releasing ${version}"
          fi

  upload-release:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs: validate-tag
    if: ${{ inputs.tag }}
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheels
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: wheels
          verbose: true

  tag-release:
    name: Tag release
    runs-on: ubuntu-latest
    needs: upload-release
    if: ${{ inputs.tag }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: git tag
        run: |
          git config user.email "enjoyintheheat@gmail.com"
          git config user.name "Release CI"
          git tag -m "v${{ inputs.tag }}" "v${{ inputs.tag }}"
          git push --tags

  publish-release:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: tag-release
    if: ${{ inputs.tag }}
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: binaries
      - name: "Publish to GitHub"
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: binaries/*
          tag_name: v${{ inputs.tag }}
